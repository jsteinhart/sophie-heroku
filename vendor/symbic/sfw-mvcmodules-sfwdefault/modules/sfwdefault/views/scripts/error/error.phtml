<?php
$this->headLink()->appendStylesheet($this->sfwModuleAssetUrl('module.css', 'sfwdefault'));
$this->headScript()->appendFile($this->sfwModuleAssetUrl('module.js', 'sfwdefault'));

$t = $this->translator;
if (empty($this->exceptionConfig['pageTitle']))
{
	$this->exceptionConfig['pageTitle'] = 'Application Exception';
}
$this->headTitle($t->_($this->exceptionConfig['pageTitle']), 'PREPEND');

if (!empty($this->exceptionConfig['headline']))
{
	echo '<h1>' . $t->_($this->exceptionConfig['headline']) . '</h1>';
}

if (!isset($this->exceptionConfig['display']))
{
	echo '<div>' . $this->escape($t->_('An application error occured.')) . '</div>';
	return;
}

$displayConfig = $this->exceptionConfig['display'];

if ($this->loggingActive)
{
	if (!empty($this->loggingError) && !empty($displayConfig['loggingStatus']) && $displayConfig['loggingStatus'] == 1)
	{
		echo '<h2>' . $t->_('Logging failed:') . '</h2>';
		echo '<div>' . $this->escape($this->loggingError) . '</div>';
	}
	elseif (!empty($displayConfig['loggingReferenceId']) && $displayConfig['loggingReferenceId'] == 1 && !empty($this->loggingReferenceId))
	{
		echo '<h2>' . $t->_('The error has been logged:') . '</h2>';
		echo '<div>The application error has been logged under the identifier "' . $this->escape($this->loggingReferenceId) . '". Please refer to this identifier when  contacting the system adiministrator.</div>';
	}
}

$displayException = (isset($displayConfig['exception']) && $displayConfig['exception'] == 1);

if ($displayException)
{
	echo '<h2>' . $t->_('Exception information:') . '</h2>';

	$exception = $this->errorHandlerError->exception;

	echo '<div class="sfwdefaultExceptionContainer" id="exceptionContainer">';
		echo '<div>';
			echo $this->escape(get_class($exception) . ' - ' . $exception->getMessage() . ' (' . $exception->getCode() . ')');
		echo '</div>';

		$displayCodeReference = (isset($displayConfig['exceptionCodeReference']) && $displayConfig['exceptionCodeReference'] == 1);
		if ($displayCodeReference)
		{
			echo '<div>';
				$file = $exception->getFile();
				$basePath = BASE_PATH . DIRECTORY_SEPARATOR;
				$basePath = str_replace('\\', '/', $basePath);
				$file = str_replace('\\', '/', $file);
				if (strpos($file, $basePath) === 0)
				{
					$file = substr($file, strlen($basePath));
				}
				elseif (strpos($file, 'phar://' . $basePath) === 0)
				{
					$file = substr($file, strlen('phar://' . $basePath));
				}

				echo $this->escape('FILE: ' . $file . ' - LINE: ' . $exception->getLine());
			echo '</div>';
		}

		$exceptionCodeSnippet = (isset($displayConfig['exceptionCodeSnippet']) && $displayConfig['exceptionCodeSnippet'] == 1);
		if ($exceptionCodeSnippet)
		{
			$file = $exception->getFile();
			$fileLines = file($file);
			$line = $exception->getLine();
			$lineStart = max(1, $line - 10);

			echo '<div>';
			echo '<ol class="sfwdefaultErrorCodeSnippet" start="' . $lineStart . '">';
				$lineCounter = $lineStart;
				foreach (array_slice($fileLines, $lineStart - 1, 20) as $codeLine)
				{
					echo '<li';
					if ($lineCounter == $line)
					{
						echo ' class="exception"';
					}
					echo '>';
					echo '<pre>' . $this->escape(trim($codeLine, "\n\r")) . ' </pre>';
					echo '</li>';
					$lineCounter++;
				}
			echo '</ol>';
			echo '</div>';
		}

		$displayStrackTrace = (isset($displayConfig['exceptionStrackTrace']) && $displayConfig['exceptionStrackTrace'] == 1);
		if ($displayStrackTrace)
		{
			echo '<h3>Stack Trace</h3>';
			echo '<ol class="sfwdefaultErrorStackTrace">';
			// TODO: use extended trace using xdebug
			$stackTrace = $exception->getTrace();
			foreach ($stackTrace as $stackTraceItem)
			{
				echo '<li>';
				if (isset($stackTraceItem['object']))
				{
					echo $this->escape('object:' . get_class($stackTraceItem['object']) . '->');
				}
				elseif (isset($stackTraceItem['class']))
				{
					echo $stackTraceItem['class'];
					echo $stackTraceItem['type'];
				}
				echo $stackTraceItem['function'];
				echo '(';
				if (isset($stackTraceItem['args']) && sizeof($stackTraceItem['args']) > 0)
				{
					$first = true;
					foreach ($stackTraceItem['args'] as $arg)
					{
						if (!$first)
						{
							echo ', ';
						}
						$first = false;

						$argType = gettype($arg);

						if ($argType == 'string')
						{
							echo $this->escape($argType . ' ' . "'" . $arg . "'");
						}
						elseif ($argType == 'integer' || $argType == 'float')
						{
							echo $this->escape($argType . ' ' . $arg);
						}
						elseif ($argType == 'array')
						{
							echo $argType . ' ';
							//print_r($arg);
						}
						elseif ($argType == 'object')
						{
							echo $this->escape('object ' . get_class($arg));
						}
						else
						{
							echo $this->escape($argType);
							//print_r($arg);
						}
					}
				}
				echo ')';

				echo '<div class="stackTraceDetails">';
					if (isset($stackTraceItem['file']))
					{
						$basePath = BASE_PATH . DIRECTORY_SEPARATOR;
						$file = $stackTraceItem['file'];
						$basePath = str_replace('\\', '/', $basePath);
						$file = str_replace('\\', '/', $file);
						if (strpos($file, $basePath) === 0)
						{
							$file = substr($file, strlen($basePath));
						}
						elseif (strpos($file, 'phar://' . $basePath) === 0)
						{
							$file = substr($file, strlen('phar://' . $basePath));
						}

						echo $t->_('FILE') . ': ' . $this->escape($file) . '<br />';
						echo $t->_('LINE') . ': ' . $this->escape($stackTraceItem['line']) . '<br />';
					}
				echo '</div>';

				echo '</li>';
			}
			echo '</ol>';
		}
	echo '</div>';

	$displayExceptionPrevious = (isset($displayConfig['exceptionPrevious']) && $displayConfig['exceptionPrevious'] == 1);

	if ($displayExceptionPrevious)
	{
		echo '<div class="sfwdefaultExceptionContainer" id="previousExceptionContainer">';
		$previousException = $exception->getPrevious();
		if (is_null($previousException))
		{
			echo $t->_('No previous exception set');
		}
		else
		{
			echo '<div>';
				echo $this->escape(get_class($previousException) . ' - ' . $previousException->getMessage() . ' (' . $previousException->getCode() . ')');
			echo '</div>';

			if ($displayCodeReference)
			{
				echo '<div>';
					echo $this->escape('FILE: ' . $previousException->getFile() . ' - LINE: ' . $previousException->getLine());
				echo '</div>';
			}

			if ($displayStrackTrace)
			{
				echo '<h3>Stack Trace</h3>';
				echo '<ol class="sfwdefaultErrorStackTrace">';
				// TODO: use extended trace using xdebug
				$stackTrace = $previousException->getTrace();
				foreach ($stackTrace as $stackTraceItem)
				{
					echo '<li>';
					if (isset($stackTraceItem['object']))
					{
						echo $this->escape('object:' . get_class($stackTraceItem['object']) . '->');
					}
					elseif (isset($stackTraceItem['class']))
					{
						echo $this->escape($stackTraceItem['class']);
						echo $this->escape($stackTraceItem['type']);
					}
					echo $stackTraceItem['function'];
					echo '(';
					if (isset($stackTraceItem['args']) && sizeof($stackTraceItem['args']) > 0)
					{
						$first = true;
						foreach ($stackTraceItem['args'] as $arg)
						{
							if (!$first)
							{
								echo ', ';
							}
							$first = false;

							$argType = gettype($arg);

							if ($argType == 'string')
							{
								echo $this->escape($argType . ' \'' . $arg . '\'');
							}
							elseif ($argType == 'integer' || $argType == 'float')
							{
								echo $this->escape($argType . ' ' . $arg);
							}
							elseif ($argType == 'array')
							{
								echo $argType;
								//print_r($arg);
							}
							elseif ($argType == 'object')
							{
								echo 'object ' . get_class($arg);
							}
							else
							{
								echo $argType;
								//print_r($arg);
							}
						}
					}
					echo ')';

					echo '<div class="stackTraceDetails">';
						$basePath = BASE_PATH . DIRECTORY_SEPARATOR;
						if (isset($stackTraceItem['file']))
						{
							$basePath = BASE_PATH . DIRECTORY_SEPARATOR;
							$file = $stackTraceItem['file'];
							$basePath = str_replace('\\', '/', $basePath);
							$file = str_replace('\\', '/', $file);
							if (strpos($file, $basePath) === 0)
							{
								$file = substr($file, strlen($basePath));
							}
							elseif (strpos($file, 'phar://' . $basePath) === 0)
							{
								$file = substr($file, strlen('phar://' . $basePath));
							}

							echo 'FILE: ' . $this->escape($file) . '<br />';
							echo 'LINE: ' . $this->escape($stackTraceItem['line']) . '<br />';
						}
					echo '</div>';

					echo '</li>';
				}
				echo '</ol>';
			}
		}
		echo '</div>';
	}
}

$exceptionPrintR = (isset($displayConfig['exceptionPrintR']) && $displayConfig['exceptionPrintR'] == 1);

if ($exceptionPrintR)
{
	echo '<h2>' . $t->_('Raw exception information:') . '</h2>';

	echo '<div style="overflow: scroll; height: 400px;">';
	echo '<pre>';
	$this->escape(print_r($this->errorHandlerError->exception));
	echo '</pre>';
	echo '</div>';
}

$displayRequestParameters = (isset($displayConfig['requestParameters']) && $displayConfig['requestParameters'] == 1);

if ($displayRequestParameters)
{
	echo '<h2>Request Parameters:</h2>';
	$requestParams = $this->errorHandlerError->request->getParams();
	echo '<table class="sfwdefaultRequestParameterTable">';
	foreach ($requestParams as $requestParamName => $requestParamValue)
	{
		echo '<tr>';
		echo '<th>' . $this->escape($requestParamName) . '</th>';
		echo '<td>' . $this->escape($requestParamValue) . '</td>';
		echo '</tr>';
	}
	echo '</table>';
}